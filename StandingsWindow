import irsdk
import customtkinter
import tkinter as tk
from PIL import Image, ImageTk
import datetime

player_class_size = 8
other_class_size = 3
standings_data_font = ("Arial", 13, "bold")
standings_title_font = ("Arial", 15, "bold")

def time_to_class_leader(self, CarIdx):
    self.ir['CarIdxF2Time']

def get_session_driver_data(self):
    if self.ir.is_connected:
        if self.ir['SessionInfo']:
            global sessions
            global session
            global results
            global driver_info
            global drivers 
            global session_data
            global types
            global qualifying_results
            
            sessions = self.ir['SessionInfo']['Sessions']
            qualifying_results = self.ir['QualifyResultsInfo']
            session = sessions[self.ir['SessionNum']]
            results = session.get("ResultsPositions")

            if results == None:
                results = qualifying_results
           
            driver_info = self.ir['DriverInfo']
            drivers = driver_info.get("Drivers")

            session_data = self.ir['SessionInfo']
            types = session_data.get('Sessions')
            return sessions, session, results, driver_info, drivers, session_data, types

def get_qualifying_results(self):
    return

def convert_time(total_seconds):
    minutes = int(total_seconds // 60)
    seconds = int(total_seconds % 60)
    split_seconds = (total_seconds - int(total_seconds)) * 100
    return f"{minutes:02}:{seconds:02}.{int(split_seconds):02}"

def calc_fastest_lap_player_frame(self, driver_best_lap, driver_last_lap, i):
    if driver_best_lap == -1 and driver_last_lap == -1:
        ######get qualy time
        driver_last_lap = "Lap not recorded"
        driver_best_lap = "00:00.00"
        self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{driver_best_lap}")
        self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text=f"{driver_last_lap}")
        return
    elif driver_last_lap != -1:
        if driver_best_lap != -1:
            if driver_last_lap == driver_best_lap:
                self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
                self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="#25f35f")
            elif driver_last_lap > driver_best_lap:
                self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}", text_color="white")
                self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="white")
            elif driver_best_lap > driver_last_lap:
                driver_best_lap = driver_last_lap
                self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
                self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="#25f35f")
        else: 
            driver_best_lap = driver_last_lap
            self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}", text_color="white")
            self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="white")
    elif driver_last_lap == None and driver_best_lap != None:
        self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
    elif driver_last_lap != None and driver_best_lap == None:
        driver_best_lap = driver_last_lap
        self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
        self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="#25f35f")
    else:
        self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}", text_color="white")
        

def calc_fastest_lap_other_frame(self, driver_best_lap, driver_last_lap, i, j):
    if driver_best_lap == -1 and driver_last_lap == -1:
        ######get qualy time
        driver_last_lap = "-"
        driver_best_lap = "00:00.00"
        self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{driver_best_lap}")
        self.car_class_standings[j].class_standings.standings_row[i].score_array_col4.configure(text=f"{driver_last_lap}")
        return
    elif driver_last_lap != -1:
        if driver_best_lap != -1:
            if driver_last_lap == driver_best_lap:
                self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
                self.car_class_standings[j].class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="#25f35f")
            elif driver_last_lap > driver_best_lap:
                self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}", text_color="white")
                self.car_class_standings[j].class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="white")
            elif driver_best_lap > driver_last_lap:
                driver_best_lap = driver_last_lap
                self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
                self.car_class_standings[j].class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="#25f35f")
        else:
            driver_best_lap = driver_last_lap
            self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
            self.car_class_standings[j].class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}")

    elif driver_last_lap == None and driver_best_lap != None:
        driver_last_lap = "-"
        self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{driver_best_lap}")
        self.car_class_standings[j].class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}")

    elif driver_last_lap != None and driver_best_lap == None:
        driver_best_lap = driver_last_lap
        self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")
        self.car_class_standings[j].class_standings.standings_row[i].score_array_col4.configure(text=f"{convert_time(driver_last_lap)}", text_color="#25f35f")
    else:
        self.car_class_standings[j].class_standings.standings_row[i].score_array_col3.configure(text=f"{convert_time(driver_best_lap)}")

def create_standings_classes(self):
    get_session_driver_data(self)
    get_session_info(self)
    cars = get_cars(self, drivers)
    get_sizeof_class(self, self.ir['PlayerCarClass'])
    self.car_class_standings = []
    i = 0
    j = 0
    for carclassid in cars[3]:
        if j == len(cars[3])-1 and i == 1:
           break
        if carclassid == self.ir['PlayerCarClass']:
            self.player_class_frame = class_frame(self.root, 'player', 1)
            sizeof_car_class = get_sizeof_class(self, self.ir['PlayerCarClass'])
            self.player_class_frame.class_standings.class_header.car_class_name.configure(text=f"{player_class} |  {sizeof_car_class}")
            i += 1
        else:
            self.car_class_standings.append(class_frame(self.root, "", j+2))
            sizeof_car_class = get_sizeof_class(self, carclassid)
            self.car_class_standings[j].class_standings.class_header.car_class_name.configure(text=f"{carclassid} |  {sizeof_car_class}")
            j += 1


def get_position_list(self):
    positions = []
    global player_class_position
    player_class_position = self.ir['PlayerCarClassPosition']
    if player_class_position == None or player_class_position <= player_class_size:
        for i in range(player_class_size):
            positions.append(i+1)
    else:
        player_class_position = self.ir['PlayerCarClassPosition']
        sizeof_car_class = get_sizeof_class(self, player_class_id)
        if player_class_position + 2 <= sizeof_car_class:
        ####need to add adjustment for player_class_size and fix if player is last 
            positions = [1, 2, 3, player_class_position-2, player_class_position-1, player_class_position, player_class_position+1, player_class_position+2]
        elif player_class_position + 1 == sizeof_car_class:
            positions = [1, 2, 3, player_class_position-3, player_class_position-2, player_class_position-1, player_class_position, player_class_position+1]
        elif player_class_position == sizeof_car_class:
            positions = [1, 2, 3, player_class_position-4, player_class_position-3, player_class_position-2, player_class_position-1, player_class_position]
    return positions

def player_make_opaque_standings_frames(self, light, dark, i):
    if i%2 == 0:
        self.player_class_frame.class_standings.standings_row[i].frame.configure(fg_color=dark, height=28)
    else:
        self.player_class_frame.class_standings.standings_row[i].frame.configure(fg_color=light, height=28)

def other_make_opaque_standings_frames(self, light, dark, i, j):
    if i%2 == 0:
        self.car_class_standings[j].class_standings.standings_row[i].frame.configure(fg_color=dark, height=28)
    else:
        self.car_class_standings[j].class_standings.standings_row[i].frame.configure(fg_color=light, height=28)

def populate_player_standings_frames(self, position, driver_user_name, driver_irating, driver_car_name, driver_last_lap, driver_best_lap, i):
    self.player_class_frame.class_standings.standings_row[i].score_array_col0.configure(text=f"{position}  |")
    self.player_class_frame.class_standings.standings_row[i].score_array_col1.configure(text=f"{driver_user_name}")
    self.player_class_frame.class_standings.standings_row[i].score_array_col2.configure(text=f"{driver_irating}", fg_color="white", text_color="black", corner_radius=12, height=20)
    calc_fastest_lap_player_frame(self, driver_best_lap, driver_last_lap, i)

def populate_other_standings_frames(self, position, driver_user_name, driver_irating, driver_car_name, driver_last_lap, driver_best_lap, i, j):
    self.car_class_standings[j].class_standings.standings_row[i].score_array_col0.configure(text=f"{position}  |")
    self.car_class_standings[j].class_standings.standings_row[i].score_array_col1.configure(text=f"{driver_user_name}")
    self.car_class_standings[j].class_standings.standings_row[i].score_array_col2.configure(text=f"{driver_irating}", fg_color="white", text_color="black", corner_radius=12, height=20)
    #self.car_class_standings[j].class_standings.standings_row[i].score_array_col5.configure(text=f"{round(times[i], 1)}")
    calc_fastest_lap_other_frame(self, driver_best_lap, driver_last_lap, i, j)

def update_player_standings(self, results, positions):
    i = 0
    if results != None:
        for result in results:
            get_driver_data(self, result.get('CarIdx'))
            player_class_color_hex = hex(player_class_color).replace("0x", "#")
            self.player_class_frame.class_standings.class_header.frame.configure(fg_color=player_class_color_hex)
            #self.player_class_frame.class_header.car_class_name.configure(text_color=player_class_color_hex)
            for position in positions:
                class_position = int(result.get('ClassPosition')+1)
                #check car for position and is in same class to the player
                if class_position == (position) and driver_car_class_id == player_class_id:
                    #only populate data size we need
                    if i == player_class_size:
                        break                   
                    driver_position = result.get('ClassPosition')+1
                    driver_last_lap = result.get('LastTime')
                    driver_best_lap = result.get('FastestTime')
                    driver_laps_completed = result.get('LapsComplete')
                    #retrieve driver data using caridx and populate standings frames with text
                    #rows empty until data gathered
                    player_make_opaque_standings_frames(self, "#21222d","#171b23", i)
                    if driver_position == player_class_position:
                        self.player_class_frame.class_standings.standings_row[i].score_array_col0.configure(text_color="#ff8934")
                        self.player_class_frame.class_standings.standings_row[i].score_array_col1.configure(text_color="#ff8934")
                        self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text_color="#ff8934")
                        self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text_color="#ff8934")
                    else:
                        self.player_class_frame.class_standings.standings_row[i].score_array_col0.configure(text_color=player_class_color_hex)
                        self.player_class_frame.class_standings.standings_row[i].score_array_col1.configure(text_color="white")
                        self.player_class_frame.class_standings.standings_row[i].score_array_col2.configure(text_color="white")
                        self.player_class_frame.class_standings.standings_row[i].score_array_col3.configure(text_color="white")
                        self.player_class_frame.class_standings.standings_row[i].score_array_col4.configure(text_color="white")
                    populate_player_standings_frames(self, position, driver_user_name, driver_irating, driver_car_name, driver_last_lap, driver_best_lap, i)
                    #if player in position 1, use to find total laps completed in the race and set them as the interval to compare times to
                    #can grab other data about the leaders times from here
                    #if i == 0 and driver_laps_completed != None:
                        #self.session_info.session_info_col2.configure(text=f"Lap {driver_laps_completed+1}")
                    i += 1
    
def get_standings_data(self, results):
    positions = get_position_list(self)
    update_player_standings(self, results, positions)
    driver_info = self.ir['DriverInfo']
    drivers = driver_info.get("Drivers")
    cars = get_cars(self, drivers)
    classids = cars[3]
    classids.remove(player_class_id)
    classid_count = 0
    for classid in classids:
        if classid_count == len(classids):
            break
        sizeof_car_class = get_sizeof_class(self, classid)
        i = 0
        positions = [1, 2, 3]
        if results != None:
            for result in results:
                get_driver_data(self, result.get('CarIdx'))
                for position in positions:
                    if i == 3:
                        break
                    class_position = int(result.get('ClassPosition')+1)
                    if driver_car_class_id == classid: 
                        class_color_hex = hex(class_color).replace("0x", "#")
                        self.car_class_standings[classid_count].class_standings.class_header.frame.configure(fg_color=class_color_hex)
                        self.car_class_standings[classid_count].class_standings.class_header.car_class_name.configure(text=f"{driver_class} |  {sizeof_car_class}", text_color="black")
                        if class_position == position and position<4:
                            driver_position = result.get('ClassPosition')+1
                            driver_last_lap = result.get('LastTime')
                            driver_best_lap = result.get('FastestTime')
                            driver_laps_completed = result.get('LapsComplete')

                            self.car_class_standings[classid_count].class_standings.standings_row[i].score_array_col0.configure(text_color=class_color_hex)
                            other_make_opaque_standings_frames(self, "#21222d","#171b23", i, classid_count)
                            populate_other_standings_frames(self, position, driver_user_name, driver_irating, driver_car_name, driver_last_lap, driver_best_lap, i, classid_count)
                            i += 1
                        
        classid_count += 1

        #populate initial race data with results from qualifying as values are None until race starts

def get_session_info(self):
    if self.ir['SessionInfo']:
        global track
        global session_num
        track = self.ir['WeekendInfo']['TrackDisplayName']
        #track = track.upper()
        session_num = self.ir['SessionNum']

        if session_num == 0:
            session_num = "Practice"
        if session_num == 1:
            session_num = "Qualifying"
        if session_num == 2:
            session_num = "Race"
        
        self.session_info.session_info_col0.configure(text=track)
        self.session_info.session_info_col3.configure(text=session_num)

        session_data = self.ir['SessionInfo']
        types = session_data.get('Sessions')

        for type in types:
            global session_type
            global session_time
            session_type = type.get('SessionType')
            session_time = type.get('SessionTime')
            session_time = datetime.timedelta(seconds=round(float(session_time.replace(" sec", ""))))
            session_time_remaining = datetime.timedelta(seconds=round(self.ir['SessionTimeRemain']))
            self.session_info.session_info_col1.configure(text=f"{session_time_remaining}/{session_time}")
        
def get_driver_data(self, CarIdx):
    if self.ir['SessionInfo']:
        driver_info = self.ir['DriverInfo']
        drivers = driver_info.get("Drivers")
        for driver in drivers:
            if driver.get('CarIdx') == CarIdx:
                global driver_user_name
                global driver_car_class_id
                global driver_irating
                global driver_car_name
                global class_color
                global driver_class
                driver_user_name = driver.get('AbbrevName')
                driver_car_class_id = driver.get('CarClassID')
                driver_irating = driver.get('IRating')
                class_color = driver.get('CarClassColor')
                driver_car_name = driver.get('CarScreenNameShort')
                driver_class = driver.get('CarClassShortName')
        return driver_user_name, driver_car_class_id, driver_irating
            
def get_sizeof_class(self, CarClassID):
        if self.ir['SessionInfo']:
            driver_info = self.ir['DriverInfo']
            drivers = driver_info.get("Drivers")
            sizeof_car_class = 0
            for driver in drivers:
                if driver.get('CarClassID') == CarClassID:
                    sizeof_car_class += 1
            return sizeof_car_class

def get_cars(self, drivers):
    player_car_found = 0
    global cars
    global carclassids
    global player_class_id
    global player_class
    cars = []
    carclassids = []
    for driver in drivers:
        if driver.get("CarClassID") != -1 and self.ir['PlayerCarIdx'] == driver.get("CarIdx") and player_car_found < 1:
            cars.append(driver.get("CarClassShortName"))
            player_car_found += 1
            global player_class
            global player_class_id
            global player_class_color
            player_class = driver.get("CarClassShortName")
            player_class_id = driver.get("CarClassID")
            player_class_color = driver.get("CarClassColor")
        elif driver.get("CarClassShortName") != None:
            cars.append(driver.get("CarClassShortName"))
            carclassids.append(driver.get("CarClassID"))
    cars = list(set(cars))
    carclassids = list(set(carclassids))
    return [cars, player_class, player_class_id, carclassids, player_class_color]

def convert_time_counter(seconds):
    seconds = seconds * 100
    if seconds > 0:
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        return "%d:%d:%d" % (hours, minutes, seconds)

class main_standings_frame:
    def __init__(self,root):
        self.frame = customtkinter.CTkFrame(root, width=600, height=30, fg_color="brown", corner_radius=0)
        self.frame.grid(sticky="sn")
        self.frame.grid_configure(rowspan=1)
        self.frame.grid_propagate(False)

class class_frame(main_standings_frame):
    def __init__(self, root, player, row):
        if player == 'player':
            self.frame = customtkinter.CTkFrame(root, width=600, height=256, fg_color="brown", corner_radius=0)
        else:
            self.frame = customtkinter.CTkFrame(root, width=600, height=116, fg_color="brown", corner_radius=0)
        self.frame.grid(row=row, sticky="sn")
        self.frame.grid_configure(rowspan=1)
        #self.frame.grid_propagate(False)
        self.class_standings = class_standings_frame(self.frame, player)

class session_info_header(main_standings_frame):
    def __init__(self,root):
        super().__init__(root)
        self.frame.configure(height=30, fg_color="#151515")
        self.frame.grid(row=0)
        self.session_info_col0 = customtkinter.CTkLabel(self.frame, text="Practice/Qualifying/Race", font=standings_title_font)
        self.session_info_col0.place(relx=0.01, rely=0.12)
        self.session_info_col1 = customtkinter.CTkLabel(self.frame, text="", font=standings_title_font)
        self.session_info_col1.place(relx=0.59, rely=0.12)
        #self.session_info_col2 = customtkinter.CTkLabel(self.frame, text="", font=standings_title_font)
        #self.session_info_col2.place(relx=0.73, rely=0.12)
        self.session_info_col3 = customtkinter.CTkLabel(self.frame, text="", font=standings_title_font)
        self.session_info_col3.place(relx=0.99, rely=0.12, anchor="ne")

class session_info_seperator(main_standings_frame):
    def __init__(self,root):
        super().__init__(root)
        self.frame.configure(height=6, fg_color="brown")
        self.frame.grid(row=1)

class car_class_header(main_standings_frame):
    def __init__(self, root):
        super().__init__(root)
        self.frame.configure(height=26, width=140, fg_color="#151515", corner_radius=0, border_width=0, border_color="white")
        self.frame.grid(row=2, sticky="we")
        self.frame.grid_columnconfigure(0, weight=1)
        self.car_class_name = customtkinter.CTkLabel(self.frame, text="GTP Class  |  # Drivers", font=standings_title_font, text_color="black")
        self.car_class_name.grid(row=0, padx=8, pady=0, sticky="w")

class standings_row_frame_dark(main_standings_frame):
    def __init__(self, root, row):
        super().__init__(root)
        self.frame.configure(height=0, fg_color="brown")
        self.frame.grid(row=row, columnspan=10)
        self.score_array_col0 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col0.place(relx=0.01)
        self.score_array_col1 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col1.place(relx=0.06)
        self.score_array_col2 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col2.place(relx=0.28, rely=0.12)
        self.score_array_col3 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col3.place(relx=0.40)
        self.score_array_col4 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col4.place(relx=0.50)
        self.score_array_col5 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col5.place(relx=0.60)

class standings_row_frame_light(main_standings_frame):
    def __init__(self, root, row):
        super().__init__(root)
        self.frame.configure(height=0, fg_color="brown")
        self.frame.grid(row=row, columnspan=10)
        self.score_array_col0 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col0.place(relx=0.01)
        self.score_array_col1 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col1.place(relx=0.06)
        self.score_array_col2 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col2.place(relx=0.28, rely=0.14)
        self.score_array_col3 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col3.place(relx=0.40)
        self.score_array_col4 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col4.place(relx=0.50)
        self.score_array_col5 = customtkinter.CTkLabel(self.frame, text="", font=standings_data_font)
        self.score_array_col5.place(relx=0.60)

class class_standings_frame():
    def __init__(self, root, player):
        if player == 'player':
            self.seperator = session_info_seperator(root)
            self.class_header = car_class_header(root)
            self.standings_row = []

            for i in range(player_class_size):
                if i%2 == 0:
                    self.standings_row.append(standings_row_frame_dark(root, i+3))
                else:
                    self.standings_row.append(standings_row_frame_light(root, i+3))
        else:
            self.seperator = session_info_seperator(root)
            self.class_header = car_class_header(root)
            self.standings_row = []

            for i in range(other_class_size):
                if i%2 == 0:
                    self.standings_row.append(standings_row_frame_dark(root, i+3))
                else:
                    self.standings_row.append(standings_row_frame_light(root, i+3))

class row_labels(customtkinter.CTkLabel):
    def __init__(self, root):
        return
    
class car_class_section():
    def __init__(self, root):
        self.header = car_class_header(root)

#standings window
class standings_window:
    def __init__(self,root):
        self.root = root
        self.root.geometry("600x600")
        self.root.configure(fg_color="brown", bg_color="brown")
        #self.root.minsize(1000,800)
        #self.root.maxsize(1000,800)
        self.root.attributes("-transparentcolor", "brown")
        self.root.attributes("-alpha", 0.98)

        self.ir = irsdk.IRSDK()
        self.ir.startup()

        self.standings_frame = main_standings_frame(self.root)
        self.standings_frame.frame.configure(fg_color="brown")

        self.session_info = session_info_header(self.standings_frame.frame)

        if self.ir.is_connected:
            create_standings_classes(self)
            self.update_standings_values()
    
    def update_standings_values(self):
        get_session_driver_data(self)

                #Session info
        get_session_info(self)
                    
                #Class Header
        cars = get_cars(self, drivers)
        get_sizeof_class(self, self.ir['PlayerCarClass'])


                #Scoreboard rows
        get_standings_data(self, results)


        self.root.after(1000, self.update_standings_values)

if __name__ == "__main__":
    root = customtkinter.CTk()
    app = standings_window(root)
    root.wm_attributes("-topmost", 1)
    #root.overrideredirect(True)
    root.mainloop()